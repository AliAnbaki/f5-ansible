---

#
# Copyright 2017 F5 Networks Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

heat_template_version: 2015-04-30

description: >
  This template deploys a BIG-IP with 2 NICs using cloud-init. It should
  only be used with BIG-IP versions greater than 13. This template has been
  customized to work on the VIO OpenStack instance at F5. It may work on
  other OpenStack installations, but it is not tested to.

parameters:
  ve_image:
    type: string
    label: F5 VE Image
    description: The image to be used on the compute instance.
    constraints:
      - custom_constraint: glance.image
  use_config_drive:
    type: boolean
    label: Use Config Drive
    description: Use config drive to provider meta and user data.
    default: false
  ve_flavor:
    type: string
    label: F5 VE Flavor
    description: Type of instance (flavor) to be used for the VE.
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor
  f5_ve_os_ssh_key:
    type: string
    label: F5 FW Root SSH Key Name
    description: Name of key-pair to be installed on the FW instances.
    constraints:
      - custom_constraint: nova.keypair
  admin_password:
    type: string
    label: F5 VE Admin User Password
    description: Password used to perform image import services
    hidden: true
  root_password:
    type: string
    label: F5 VE Root User Password
    description: Password used to perform image import services
    hidden: true
  license:
    type: string
    label: Primary VE License Base Key
    description: F5 TMOS License Basekey
    hidden: true
  mgmt_network:
    type: string
    label: VE Management Network
    description: Management Interface Network.
    default: test
    constraints:
      - custom_constraint: neutron.network
  network_1_name:
    type: string
    label: VE Network Name for the 1.1 Interface
    description: TMM 1.1 network name.
    default: network-1.1
  network_1_subnet_cidr:
    type: string
    description: Private subnet first interface is attached to
    default: 10.2.2.0/24
  network_2_name:
    type: string
    label: VE Network Name for the 1.2 Interface
    description: TMM 1.2 network name.
    default: network-1.2
  network_2_subnet_cidr:
    type: string
    description: Private subnet first interface is attached to
    default: 10.2.3.0/24
  dns_nameservers:
    type: comma_delimited_list
    description: DNS servers the server needs so it can install software
    default: 172.27.1.1,172.27.2.1

resources:
  network_1_network:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: network_1_network
  network_1_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: network_1_subnet
      cidr: { get_param: network_1_subnet_cidr }
      network: { get_resource: network_1_network }
      dns_nameservers: { get_param: dns_nameservers }
      enable_dhcp: true
      allocation_pools:
        - start: 10.2.2.2
          end: 10.2.2.254
  network_2_network:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: network_2_network
  network_2_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: network_2_subnet
      cidr: { get_param: network_2_subnet_cidr }
      network: { get_resource: network_2_network }
      dns_nameservers: { get_param: dns_nameservers }
      enable_dhcp: true
      allocation_pools:
        - start: 10.2.3.2
          end: 10.2.3.254
  bigip_data_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: security group rules for data interfaces
      name: bigip_data_security_group
      rules:
        - protocol: icmp
          direction: ingress
        - protocol: icmp
          direction: egress
        - protocol: tcp
          direction: ingress
        - protocol: tcp
          direction: egress
        - protocol: udp
          direction: ingress
        - protocol: udp
          direction: egress
  bigip_mgmt_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: security group rules for bigip mgmt port
      name: bigip_mgmt_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
  mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: mgmt_network }
      security_groups: [{ get_resource: bigip_mgmt_security_group }]
  network_1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_1_network }
      security_groups: [{ get_resource: bigip_data_security_group }]
  network_2_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_2_network }
      security_groups: [{ get_resource: bigip_data_security_group }]
  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      # Wait no more than 30 minutes
      timeout: 1800
  ve_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: ve_image }
      flavor: { get_param: ve_flavor }
      key_name: { get_param: f5_ve_os_ssh_key }
      networks:
        - port: { get_resource: mgmt_port }
        - port: { get_resource: network_1_port }
        - port: { get_resource: network_2_port }
      user_data_format: RAW
      config_drive: { get_param: use_config_drive }
      user_data:
        str_replace:
          params:
            __admin_password__: { get_param: admin_password }
            __root_password__: { get_param: root_password }
            __license__: { get_param: license }
            __network_1_name__: { get_param: network_1_name }
            __network_2_name__: { get_param: network_2_name }
            __network_1_address__: { get_attr: [network_1_port, fixed_ips, 0, ip_address] }
            __network_1_cidr__: { get_attr: [network_1_port, subnets, 0, cidr] }
            wc_notify: { get_attr: [wait_handle, curl_cli] }
          template: |
            #cloud-config
            write_files:
              - path: /config/cloud/onboard.sh
                permissions: 0755
                owner: root:root
                content: |
                  #!/bin/bash

                  bash /config/cloud/wait-for-bigip.sh

                  # Load Input Parameters
                  . /config/cloud/onboard_config_vars

                  /usr/local/bin/SOAPLicenseClient --basekey ${BIGIP_LICENSE}
                  sleep 10

                  bash /config/cloud/wait-for-bigip.sh

                  echo "root:${BIGIP_ROOT_PASSWORD}" | chpasswd

                  tmsh modify sys db setup.run value false
                  tmsh modify sys ntp timezone UTC
                  tmsh modify sys ntp servers add { 0.us.pool.ntp.org 1.us.pool.ntp.org }
                  tmsh modify auth user admin password ${BIGIP_ADMIN_PASSWORD}
                  tmsh modify sys provision gtm level nominal
                  tmsh create net vlan ${NETWORK_1_NAME} interfaces add { 1.1 }
                  tmsh create net self ${NETWORK_1_NAME}_self address ${NETWORK_1_ADDRESS}/${NETWORK_1_PREFIX} vlan ${NETWORK_1_NAME} allow-service all

                  tmsh save /sys config

                  wc_notify --insecure --data-binary '{"status": "SUCCESS"}'

              - path: /config/cloud/onboard_config_vars
                permissions: 0755
                owner: root:root
                content: |
                  #!/bin/bash

                  BIGIP_LICENSE=__license__
                  BIGIP_ADMIN_PASSWORD=__admin_password__
                  BIGIP_ROOT_PASSWORD=__root_password__

                  NETWORK_1_NAME=__network_1_name__
                  NETWORK_1_ADDRESS=__network_1_address__
                  NETWORK_1_CIDR_BLOCK=__network_1_cidr__
                  NETWORK_1_NET=${NETWORK_1_CIDR_BLOCK%/*}
                  NETWORK_1_PREFIX=${NETWORK_1_CIDR_BLOCK#*/}

              - path: /config/cloud/wait-for-bigip.sh
                permissions: 0755
                owner: root:root
                content: |
                  #!/bin/bash
                  for retries in {1..100} ; do
                      # Retry until mcpd completes startup
                      tmsh -a show sys mcp-state field-fmt 2>/dev/null | grep phase | grep running
                      rc=$?
                      if [ $rc -eq 0 ]; then break ; fi
                      sleep 30
                  done

                  if [ $rc -ne 0 ]; then
                      /usr/bin/tmsh -a show sys mcp-state field-fmt
                  fi
                  echo "Runlevel is now valid, kicking off provisioning..."
                  sleep 5

              - path: /config/cloud/custom-config.sh
                permissions: 0755
                owner: root:root
                content: |
                  #!/bin/bash

                  ##### Load Input Parameters #####
                  . /config/cloud/onboard_config_vars

                  ##### ssh_authorized_keys MODULE NOT ENABLED #####
                  #echo "ssh-rsa XXXX...fbhWIUm+z9 my-ssh-key" >> /home/admin/.ssh/authorized_keys

            runcmd:
             - /config/cloud/onboard.sh &

outputs:
  ve_instance_name:
    description: Name of the instance
    value: { get_attr: [ve_instance, name] }
  ve_instance_id:
    description: ID of the instance
    value: { get_resource: ve_instance }
  mgmt_ip:
    description: The mgmt IP address of f5 ve instance
    value: { get_attr: [mgmt_port, fixed_ips, 0, ip_address] }
  mgmt_mac:
    description: The mgmt MAC address of f5 VE instance
    value: { get_attr: [mgmt_port, mac_address] }
  mgmt_port:
    description: The mgmt port id of f5 VE instance
    value: { get_resource: mgmt_port }
  network_1_ip:
    description: The 1.1 Nonfloating SelfIP address of f5 ve instance
    value: { get_attr: [network_1_port, fixed_ips, 0, ip_address] }
  network_1_mac:
    description: The 1.1 MAC address of f5 VE instance
    value: { get_attr: [network_1_port, mac_address] }
  network_1_port:
    description: The 1.1 port id of f5 VE instance
    value: { get_resource: network_1_port }
  network_2_ip:
    description: The 1.2 Nonfloating SelfIP address of f5 ve instance
    value: { get_attr: [network_2_port, fixed_ips, 0, ip_address] }
  network_2_mac:
    description: The 1.2 MAC address of f5 VE instance
    value: { get_attr: [network_2_port, mac_address] }
  network_2_port:
    description: The 1.2 port id of f5 VE instance
    value: { get_resource: network_2_port }
