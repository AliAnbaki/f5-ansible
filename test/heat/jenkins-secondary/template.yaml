---

#
# Copyright 2017 F5 Networks Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

heat_template_version: 2015-04-30

description: |
  HOT template to deploy a secondary Jenkins installation to use in fanning out
  work to remote workers.

parameters:
  ve_image:
    type: string
    description: The image to be used on the compute instance.
    constraints:
      - custom_constraint: glance.image
  ve_flavor:
    type: string
    description: Type of instance (flavor) to be used for the VE.
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor
  f5_ve_os_ssh_key:
    type: string
    description: Name of key-pair to be installed on the FW instances.
    constraints:
      - custom_constraint: nova.keypair
  mgmt_network:
    type: string
    description: Management Interface Network.
    default: test
    constraints:
      - custom_constraint: neutron.network
  jenkins_ssh_key:
    type: string
    description: Public SSH key of Jenkins server to log in and create a remote agent with
  insecure_registries:
    type: comma_delimited_list
    description: A list of insecure registries that you want Docker to be able to use.
  gnupg_dir_location:
    type: string
    description: git clone-able location of gnupg files used for decrypting secrets in f5-ansible.
  secondary_private_key:
    type: string
    description: Initial private key used to clone the gnupg_dir_location.
  secondary_public_key:
    type: string
    description: Initial public key used to clone gnupg_dir_location.
  compose_site_yaml:
    type: string
    description: site.yaml used to customize the docker-compose file used to install test containers.
resources:
  mgmt_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: security group rules for mgmt port
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
  mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: mgmt_network }
      security_groups: [{ get_resource: mgmt_security_group }]
  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 3600

  cloud_init_userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: cloud_config }

  cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        runcmd:
          - /tmp/onboard.sh &
        write_files:
          - path: /tmp/requirements.galaxy.yaml
            permissions: 0755
            owner: root:root
            content: |
              - src: geerlingguy.jenkins
              - src: franklinkim.docker-compose

          - path: /etc/docker/daemon.json
            permissions: 0755
            owner: root:root
            content:
              str_replace:
                params:
                  __insecure_registries__: { list_join: ['", "', { get_param: insecure_registries } ] }
                template: |
                  {
                    "bip": "1.2.3.4/24",
                    "insecure-registries": ["__insecure_registries__"]
                  }

          - path: /tmp/requirements.pip.txt
            permissions: 0755
            owner: root:root
            content: |
              ansible
              virtualenvwrapper

          - path: /etc/ansible/ansible.cfg
            permissions: 0755
            owner: root:root
            content: |
              [defaults]
              remote_tmp=$HOME/.ansible/tmp

          - path: /tmp/setup-gnupg.sh
            permissions: 0755
            owner: root:root
            content:
              str_replace:
                params:
                  __gnupg_dir_location__: { get_param: gnupg_dir_location }
                template: |
                  git clone __gnupg_dir_location__ /root/.gnupg
                  chmod 700 /root/.gnupg
                  rm -rf /root/.gnupg/.git
                  rm -rf /root/.gnupg/.idea
                  chmod 700 $(find /root/.gnupg/ -type d)
                  chmod 600 $(find /root/.gnupg/openpgp-revocs.d -type f)
                  chmod 600 $(find /root/.gnupg/private-keys-v1.d -type f)

          - path: /tmp/secondary-private-key
            permissions: 600
            owner: root:root
            content:
             str_replace:
               params:
                 __secondary_private_key__: { get_param: secondary_private_key }
               template: |
                 __secondary_private_key__

          - path: /tmp/docker-compose.site.yaml
            permissions: 0755
            owner: root:root
            content: { get_param: compose_site_yaml }

          - path: /tmp/onboard.yaml
            permissions: 0755
            owner: root:root
            content: |
              ---
              - hosts: localhost
                connection: local
                tasks:
                  - name: Install required apt keys
                    apt_key:
                      url: "{{ item }}"
                    with_items:
                      - "https://download.docker.com/linux/ubuntu/gpg"
                      - "https://pkg.jenkins.io/debian-stable/jenkins.io.key"

                  - name: Install jenkins repo
                    apt_repository:
                      update_cache: yes
                      repo: "deb https://pkg.jenkins.io/debian-stable binary/"

                  - name: Install Docker repo
                    apt_repository:
                      update_cache: yes
                      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"

                  - name: Install required packages
                    apt:
                      name: "{{ item }}"
                      update_cache: "yes"
                    with_items:
                      - apt-transport-https
                      - ca-certificates
                      - curl
                      - software-properties-common
                      - docker-ce

              - hosts: localhost
                connection: local
                vars:
                  jenkins_hostname: localhost
                  jenkins_admin_username: admin
                  jenkins_admin_password: admin
                  jenkins_connection_delay: 5
                  jenkins_connection_retries: 60
                  jenkins_http_port: 8080
                  jenkins_url_prefix: ""
                  jenkins_plugins:
                    - timestamper
                    - ws-cleanup
                    - github-branch-source
                    - build-timeout
                    - email-ext
                    - docker-workflow
                roles:
                  - geerlingguy.java
                  - geerlingguy.jenkins

              - hosts: localhost
                connection: local
                tasks:
                  - name: Download docker-compose
                    get_url:
                      url: "https://github.com/docker/compose/releases/download/1.17.1/docker-compose-Linux-x86_64"
                      dest: "/usr/local/bin/docker-compose"
                      mode: 0655

                  - name: Restart services
                    service:
                      name: "{{ item }}"
                      state: "restarted"
                      enabled: true
                    with_items:
                      - docker
                      - jenkins

          - path: /tmp/install-f5ansible.sh
            permissions: 0755
            owner: root:root
            content: |
              git clone https://github.com/F5Networks/f5-ansible.git /opt/f5-ansible
              source /root/.bashrc
              mkvirtualenv f5ansible
              workon f5ansible
              cd /opt/f5-ansible
              pip install -r requirements.test.txt
              echo 'eval "$(_F5ANSIBLE_COMPLETE=source /opt/f5-ansible/devtools/bin/f5ansible)"' >> ~/.bashrc
              echo 'export PATH=$PATH:/opt/f5-ansible/devtools/bin/' >> ~/.bashrc

          - path: /tmp/install-containers.sh
            permissions: 0755
            owner: root:root
            content: |
              /opt/f5-ansible/devtools/bin/f5ansible fetch containers --site-override /tmp/docker-compose.site.yaml

          - path: /tmp/setup-virtualenvwrapper.sh
            permissions: 0755
            owner: root:root
            content: |
              echo "export WORKON_HOME=/root/envs" >> /root/.bashrc
              echo "source `which virtualenvwrapper.sh`" >> /root/.bashrc
              mkdir -p /root/envs
              export WORKON_HOME=/root/envs
              source /usr/local/bin/virtualenvwrapper.sh

          - path: /tmp/onboard.sh
            permissions: 0755
            owner: root:root
            content:
              str_replace:
                params:
                  wc_notify: { get_attr: [wait_handle, curl_cli] }
                  __jenkins_ssh_key__: { get_param: jenkins_ssh_key }
                  __secondary_public_key__: { get_param: secondary_public_key }
                template: |
                  #!/bin/bash

                  killall apt-get
                  apt-get update
                  apt-get install -y python-pip gnupg2

                  pip install -r /tmp/requirements.pip.txt
                  ansible-galaxy install --force -r /tmp/requirements.galaxy.yaml
                  until ansible-playbook -i notahost, /tmp/onboard.yaml -vvvv; do sleep 1; done

                  # Turn off SSH host checking
                  echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config

                  echo "__jenkins_ssh_key__" >> /root/.ssh/authorized_keys
                  echo "__secondary_public_key__" > /root/.ssh/id_rsa.pub
                  mv /tmp/secondary-private-key /root/.ssh/id_rsa
                  chmod 600 /root/.ssh/id_rsa /root/.ssh/id_rsa.pub

                  /tmp/setup-virtualenvwrapper.sh
                  /tmp/install-f5ansible.sh
                  /tmp/install-containers.sh
                  if [ $? -ne 0 ]; then
                    wc_notify --insecure --data-binary '{"status": "FAILURE", "data": "Failed to install containers"}'
                  fi
                  /tmp/setup-gnupg.sh

                  wc_notify --insecure --data-binary '{"status": "SUCCESS"}'

  ve_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: ve_image }
      flavor: { get_param: ve_flavor }
      key_name: { get_param: f5_ve_os_ssh_key }
      networks:
        - port: { get_resource: mgmt_port }
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: cloud_init_userdata

outputs:
  instance_name:
    description: Name of the instance
    value: { get_attr: [ve_instance, name] }
  instance_id:
    description: ID of the instance
    value: { get_resource: ve_instance }
  mgmt_ip:
    description: The mgmt IP address of f5 ve instance
    value: { get_attr: [mgmt_port, fixed_ips, 0, ip_address] }
