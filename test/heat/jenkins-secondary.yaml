---

#
# Copyright 2017 F5 Networks Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

heat_template_version: 2015-04-30

description: |
  HOT template to deploy a secondary Jenkins installation to use in fanning out
  work to remote workers.

parameters:
  ve_image:
    type: string
    description: The image to be used on the compute instance.
    constraints:
      - custom_constraint: glance.image
  ve_flavor:
    type: string
    description: Type of instance (flavor) to be used for the VE.
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor
  f5_ve_os_ssh_key:
    type: string
    description: Name of key-pair to be installed on the FW instances.
    constraints:
      - custom_constraint: nova.keypair
  mgmt_network:
    type: string
    description: Management Interface Network.
    default: test
    constraints:
      - custom_constraint: neutron.network
  jenkins_ssh_key:
    type: string
    description: Public SSH key of Jenkins server to log in and create a remote agent with
  insecure_registries:
    type: comma_delimited_list
    description: A list of insecure registries that you want Docker to be able to use.
resources:
  mgmt_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: security group rules for mgmt port
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
  mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: mgmt_network }
      security_groups: [{ get_resource: mgmt_security_group }]
  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 3600
  ve_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: ve_image }
      flavor: { get_param: ve_flavor }
      key_name: { get_param: f5_ve_os_ssh_key }
      networks:
        - port: { get_resource: mgmt_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            wc_notify: { get_attr: [wait_handle, curl_cli] }
            __jenkins_ssh_key__: { get_param: jenkins_ssh_key }
            __insecure_registries__: { list_join: ['", "', { get_param: insecure_registries } ] }
          template: |
            #cloud-config
            write_files:
              - path: /tmp/onboard.sh
                permissions: 0755
                owner: root:root
                content: |
                  #!/bin/bash

                  killall apt-get
                  apt-get update
                  apt-get install -y python-pip

                  pip install -r /tmp/requirements.pip.txt
                  ansible-galaxy install --force -r /tmp/requirements.galaxy.yaml
                  ansible-playbook -i notahost, /tmp/onboard.yaml -vvvv

                  echo "__jenkins_ssh_key__" >> /root/.ssh/authorized_keys
                  wc_notify --insecure --data-binary '{"status": "SUCCESS"}'

              - path: /etc/docker/daemon.json
                permissions: 0755
                owner: root:root
                content: |
                  {
                    "bip": "1.2.3.4/24",
                    "insecure-registries": ["__insecure_registries__"]
                  }

              - path: /tmp/requirements.galaxy.yaml
                permissions: 0755
                owner: root:root
                content: |
                  - src: caphrim007.jenkins
                    version: master
                  - src: franklinkim.docker-compose

              - path: /tmp/requirements.pip.txt
                permissions: 0755
                owner: root:root
                content: |
                  ansible

              - path: /etc/ansible/ansible.cfg
                permissions: 0755
                owner: root:root
                content: |
                  [defaults]
                  remote_tmp=$HOME/.ansible/tmp

              - path: /tmp/onboard.yaml
                permissions: 0755
                owner: root:root
                content: |
                  ---
                  - hosts: localhost
                    connection: local
                    vars:
                      jenkins_hostname: localhost
                      jenkins_admin_username: admin
                      jenkins_admin_password: admin
                      jenkins_connection_delay: 5
                      jenkins_connection_retries: 60
                      jenkins_http_port: 8080
                      jenkins_url_prefix: ""
                      jenkins_plugins:
                        - timestamper
                        - ws-cleanup
                        - github-branch-source
                        - build-timeout
                        - email-ext
                        - docker-workflow

                    tasks:
                      - name: Install required apt keys
                        apt_key:
                          url: "{{ item }}"
                        with_items:
                          - "https://download.docker.com/linux/ubuntu/gpg"
                          - "https://pkg.jenkins.io/debian-stable/jenkins.io.key"

                      - name: Install jenkins repo
                        apt_repository:
                          update_cache: yes
                          repo: "deb https://pkg.jenkins.io/debian-stable binary/"

                      - name: Install Docker repo
                        apt_repository:
                          update_cache: yes
                          repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"

                      - name: Install required packages
                        apt:
                          name: "{{ item }}"
                          update_cache: "yes"
                        with_items:
                          - apt-transport-https
                          - ca-certificates
                          - curl
                          - software-properties-common
                          - docker-ce

                      # include_role cannot be used alongside with_items. If this
                      # changes in the future, consider changing this playbook.
                      - name: Ensure Java is present
                        include_role:
                          name: "geerlingguy.java"

                      - name: Ensure Jenkins is present
                        include_role:
                          name: "caphrim007.jenkins"

                      - name: Download docker-compose
                        get_url:
                          url: "https://github.com/docker/compose/releases/download/1.16.1/docker-compose-Linux-x86_64"
                          dest: "/usr/local/bin/docker-compose"
                          mode: 0655

                      - name: Restart services
                        service:
                          name: "{{ item }}"
                          state: "restarted"
                          enabled: true
                        with_items:
                          - docker
                          - jenkins

            runcmd:
             - /tmp/onboard.sh &
outputs:
  instance_name:
    description: Name of the instance
    value: { get_attr: [ve_instance, name] }
  instance_id:
    description: ID of the instance
    value: { get_resource: ve_instance }
  mgmt_ip:
    description: The mgmt IP address of f5 ve instance
    value: { get_attr: [mgmt_port, fixed_ips, 0, ip_address] }
